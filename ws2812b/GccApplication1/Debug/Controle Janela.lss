
Controle Janela.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062c  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Adc_rotina>:
#define clr_bit(Y,bit_x) (Y&=~(1<<bit_x)) 
#define tst_bit(Y,bit_x) (Y&(1<<bit_x)) 

unsigned short int Adc_rotina(void)
{
	set_bit(ADCSRA, ADSC); //inicia a conversão
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	while (tst_bit(ADCSRA, ADSC)) // travado ate terminar a leitura
  8a:	80 81       	ld	r24, Z
  8c:	86 fd       	sbrc	r24, 6
  8e:	fd cf       	rjmp	.-6      	; 0x8a <Adc_rotina+0xa>
		;
	return ADC; 
  90:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  94:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
	int lastRead = 0;
	int actualRead = 0;
	DDRB = 0b00000011; // FC input, IN(motor) output
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001100; //pullup
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	85 b9       	out	0x05, r24	; 5
	
	clr_bit(PORTB,IN1); 
  a2:	28 98       	cbi	0x05, 0	; 5
	clr_bit(PORTB,IN2); 
  a4:	29 98       	cbi	0x05, 1	; 5
	
	// Configuração do ADC
	// DIDR0 => ADC5D = 1 entr.anal.PC5 (potenciômetro externo) ver pg.43
	DIDR0 = 0x20;// ver pag. 448 do manual
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
	//DIDR0 = 0x01; // ADC0 da placa
	// ADMUX => Tensão AVCC, canal ADC5, resultado alinhado a direita
	ADMUX = 0x45;// ver pag. 444
  ac:	85 e4       	ldi	r24, 0x45	; 69
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//ADMUX = 0x40;// ADC0
	// ADCSRA => ADC habilitado, convers.simples - ADATE=0(bit5) prescaler = 128
	ADCSRA = 0x87; // ver pag. 445
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
}

int main(void)
{
	int lastRead = 0;
	int actualRead = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x26>
		;
	return ADC; 
}

int main(void)
{
  be:	ec 01       	movw	r28, r24
	
	while(1) //laço infinito
	{
		
		lastRead = actualRead;
		actualRead = Adc_rotina();
  c0:	0e 94 40 00 	call	0x80	; 0x80 <Adc_rotina>
		if(actualRead >= 780){
  c4:	8c 30       	cpi	r24, 0x0C	; 12
  c6:	23 e0       	ldi	r18, 0x03	; 3
  c8:	92 07       	cpc	r25, r18
  ca:	54 f0       	brlt	.+20     	; 0xe0 <main+0x46>
			//fechar
			if(lastRead < 780){ // liga o motor somente em no momento que o valor muda
  cc:	cc 30       	cpi	r28, 0x0C	; 12
  ce:	d3 40       	sbci	r29, 0x03	; 3
  d0:	b4 f7       	brge	.-20     	; 0xbe <main+0x24>
				set_bit(PORTB,IN1);
  d2:	28 9a       	sbi	0x05, 0	; 5
				clr_bit(PORTB,IN2);
  d4:	29 98       	cbi	0x05, 1	; 5
				while(tst_bit(PINB,FC2))  //deixa o motor ligado ate que bata no fim de curso
  d6:	1b 99       	sbic	0x03, 3	; 3
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x3c>
					;
				clr_bit(PORTB,IN1);  // desliga o motor
  da:	28 98       	cbi	0x05, 0	; 5
				clr_bit(PORTB,IN2);
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	ef cf       	rjmp	.-34     	; 0xbe <main+0x24>
				}
			}else{
			if(lastRead >= 780){
  e0:	cc 30       	cpi	r28, 0x0C	; 12
  e2:	d3 40       	sbci	r29, 0x03	; 3
  e4:	64 f3       	brlt	.-40     	; 0xbe <main+0x24>
				clr_bit(PORTB,IN1);
  e6:	28 98       	cbi	0x05, 0	; 5
				set_bit(PORTB,IN2);
  e8:	29 9a       	sbi	0x05, 1	; 5
				while(tst_bit(PINB,FC1))
  ea:	1a 99       	sbic	0x03, 2	; 3
  ec:	fe cf       	rjmp	.-4      	; 0xea <main+0x50>
					;
				clr_bit(PORTB,IN1);
  ee:	28 98       	cbi	0x05, 0	; 5
				clr_bit(PORTB,IN2);
  f0:	29 98       	cbi	0x05, 1	; 5
  f2:	e5 cf       	rjmp	.-54     	; 0xbe <main+0x24>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
