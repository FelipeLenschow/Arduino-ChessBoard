
PWM led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h> //para incluir rotina _delay_ms()
int main(void)
{
	unsigned char i;
	// led saida PB3
	DDRB = 0b00001000; // configura o bit 3 => PB3
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	84 b9       	out	0x04, r24	; 4
	// buzzer saida PD3
	DDRD = 0b00001000; // configura o bit 3 => PD3
  84:	8a b9       	out	0x0a, r24	; 10
	// saida PB3 para OC2A página 203
	// saida PD3 para OC2B
	TCCR2A = 0b11110001; //MODO 1 para PWM fase corrigida, saidaOC2A(INVERTIDA) e OC2B(INVERTIDA) TOP = 0xFF, OC2A e OC2B habilitados
  86:	81 ef       	ldi	r24, 0xF1	; 241
  88:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = 0b00000001; // liga TC2, prescaler = 1
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	OCR2B = 0; //controle do ciclo ativo do PWM (0%) no pino OC2B => desligaro buzzer
  92:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	OCR2A = 0; //controle do ciclo ativo do PWM (0%) no pino OC2A => desligar oled
  96:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	while (1)
	{
		for(i = 255; i > 0; i =i-5) // inicia com 100% - led 100% aceso
		{
			OCR2A = i;
  9a:	a3 eb       	ldi	r26, 0xB3	; 179
  9c:	b0 e0       	ldi	r27, 0x00	; 0
			OCR2B = i;
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f0 e0       	ldi	r31, 0x00	; 0
	TCCR2B = 0b00000001; // liga TC2, prescaler = 1
	OCR2B = 0; //controle do ciclo ativo do PWM (0%) no pino OC2B => desligaro buzzer
	OCR2A = 0; //controle do ciclo ativo do PWM (0%) no pino OC2A => desligar oled
	while (1)
	{
		for(i = 255; i > 0; i =i-5) // inicia com 100% - led 100% aceso
  a2:	8f ef       	ldi	r24, 0xFF	; 255
		{
			OCR2A = i;
  a4:	8c 93       	st	X, r24
			OCR2B = i;
  a6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	31 ee       	ldi	r19, 0xE1	; 225
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
	TCCR2B = 0b00000001; // liga TC2, prescaler = 1
	OCR2B = 0; //controle do ciclo ativo do PWM (0%) no pino OC2B => desligaro buzzer
	OCR2A = 0; //controle do ciclo ativo do PWM (0%) no pino OC2A => desligar oled
	while (1)
	{
		for(i = 255; i > 0; i =i-5) // inicia com 100% - led 100% aceso
  ba:	85 50       	subi	r24, 0x05	; 5
  bc:	99 f7       	brne	.-26     	; 0xa4 <main+0x24>
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x22>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
