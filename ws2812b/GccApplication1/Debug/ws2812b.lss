
ws2812b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  00800100  00800100  0000021a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000941  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e6  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000383  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026a  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 38       	cpi	r26, 0x80	; 128
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  88:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setLed>:
	Leds[AUX+1] = red;
	Leds[AUX+2] = blue;
}

void setLed(){
	PORTB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	85 b9       	out	0x05, r24	; 5
	...
	NOP;
	NOP;
	NOP;
	NOP;
	NOP;
	PORTB = 0x00;
  b4:	15 b8       	out	0x05, r1	; 5
	...
	NOP;
	NOP;
	NOP;
	NOP;
  be:	08 95       	ret

000000c0 <clearLed>:
}

void clearLed(){
	PORTB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	85 b9       	out	0x05, r24	; 5
	...
	NOP;
	NOP;
	NOP;
	NOP;
	PORTB = 0x00;
  cc:	15 b8       	out	0x05, r1	; 5
	...
	NOP;
	NOP;
	NOP;
	NOP;
	NOP;
	NOP;
  ee:	08 95       	ret

000000f0 <LedShow>:
		
		
	}
}

void LedShow(){
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	11 e0       	ldi	r17, 0x01	; 1
 100:	0f 2e       	mov	r0, r31
 102:	f0 e8       	ldi	r31, 0x80	; 128
 104:	ef 2e       	mov	r14, r31
 106:	f2 e0       	ldi	r31, 0x02	; 2
 108:	ff 2e       	mov	r15, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	19 c0       	rjmp	.+50     	; 0x140 <LedShow+0x50>
	for(int i = 0; i < 192; i++)
		for(int j = 0; j < 8; j++)
		   if(tst_bit(Leds[i], j)) setLed(); 
 10e:	f8 01       	movw	r30, r16
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	0c 2e       	mov	r0, r28
 116:	02 c0       	rjmp	.+4      	; 0x11c <LedShow+0x2c>
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <LedShow+0x28>
 120:	80 ff       	sbrs	r24, 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <LedShow+0x3a>
 124:	0e 94 48 00 	call	0x90	; 0x90 <setLed>
 128:	02 c0       	rjmp	.+4      	; 0x12e <LedShow+0x3e>
		   else clearLed();
 12a:	0e 94 60 00 	call	0xc0	; 0xc0 <clearLed>
	}
}

void LedShow(){
	for(int i = 0; i < 192; i++)
		for(int j = 0; j < 8; j++)
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	c8 30       	cpi	r28, 0x08	; 8
 132:	d1 05       	cpc	r29, r1
 134:	61 f7       	brne	.-40     	; 0x10e <LedShow+0x1e>
 136:	0e 5f       	subi	r16, 0xFE	; 254
 138:	1f 4f       	sbci	r17, 0xFF	; 255
		
	}
}

void LedShow(){
	for(int i = 0; i < 192; i++)
 13a:	e0 16       	cp	r14, r16
 13c:	f1 06       	cpc	r15, r17
 13e:	19 f0       	breq	.+6      	; 0x146 <LedShow+0x56>
		
		
	}
}

void LedShow(){
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	e4 cf       	rjmp	.-56     	; 0x10e <LedShow+0x1e>
	for(int i = 0; i < 192; i++)
		for(int j = 0; j < 8; j++)
		   if(tst_bit(Leds[i], j)) setLed(); 
		   else clearLed();
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <main>:


int main(void)
{

	DDRB = 0xFF; 
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	84 b9       	out	0x04, r24	; 4
		   else clearLed();
}

void corLed(int Led, int red, int green, int blue){
	int AUX = Led * 3;
	Leds[AUX] = green;
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	10 82       	st	Z, r1
	Leds[AUX+1] = red;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	93 83       	std	Z+3, r25	; 0x03
 166:	82 83       	std	Z+2, r24	; 0x02
	Leds[AUX+2] = blue;
 168:	15 82       	std	Z+5, r1	; 0x05
 16a:	14 82       	std	Z+4, r1	; 0x04
		   else clearLed();
}

void corLed(int Led, int red, int green, int blue){
	int AUX = Led * 3;
	Leds[AUX] = green;
 16c:	97 83       	std	Z+7, r25	; 0x07
 16e:	86 83       	std	Z+6, r24	; 0x06
	Leds[AUX+1] = red;
 170:	11 86       	std	Z+9, r1	; 0x09
 172:	10 86       	std	Z+8, r1	; 0x08
	Leds[AUX+2] = blue;
 174:	13 86       	std	Z+11, r1	; 0x0b
 176:	12 86       	std	Z+10, r1	; 0x0a
		   else clearLed();
}

void corLed(int Led, int red, int green, int blue){
	int AUX = Led * 3;
	Leds[AUX] = green;
 178:	15 86       	std	Z+13, r1	; 0x0d
 17a:	14 86       	std	Z+12, r1	; 0x0c
	Leds[AUX+1] = red;
 17c:	17 86       	std	Z+15, r1	; 0x0f
 17e:	16 86       	std	Z+14, r1	; 0x0e
	Leds[AUX+2] = blue;
 180:	91 8b       	std	Z+17, r25	; 0x11
 182:	80 8b       	std	Z+16, r24	; 0x10
		   else clearLed();
}

void corLed(int Led, int red, int green, int blue){
	int AUX = Led * 3;
	Leds[AUX] = green;
 184:	93 8b       	std	Z+19, r25	; 0x13
 186:	82 8b       	std	Z+18, r24	; 0x12
	Leds[AUX+1] = red;
 188:	15 8a       	std	Z+21, r1	; 0x15
 18a:	14 8a       	std	Z+20, r1	; 0x14
	Leds[AUX+2] = blue;
 18c:	97 8b       	std	Z+23, r25	; 0x17
 18e:	86 8b       	std	Z+22, r24	; 0x16
		   else clearLed();
}

void corLed(int Led, int red, int green, int blue){
	int AUX = Led * 3;
	Leds[AUX] = green;
 190:	11 8e       	std	Z+25, r1	; 0x19
 192:	10 8e       	std	Z+24, r1	; 0x18
	Leds[AUX+1] = red;
 194:	93 8f       	std	Z+27, r25	; 0x1b
 196:	82 8f       	std	Z+26, r24	; 0x1a
	Leds[AUX+2] = blue;
 198:	95 8f       	std	Z+29, r25	; 0x1d
 19a:	84 8f       	std	Z+28, r24	; 0x1c
	corLed(0,255,0,0);
	corLed(1,0,255,0);
	corLed(2,0,0,255);
	corLed(3,0,255,255);
	corLed(4,255,0,255);
	LedShow();
 19c:	0e 94 78 00 	call	0xf0	; 0xf0 <LedShow>
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0x4c>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
